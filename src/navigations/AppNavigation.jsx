import React, { useState, useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { useDispatch, useSelector } from 'react-redux';
import HomeNavigation from './HomeNavigation';
import UserNavigation from './UserNavigation';
import Welcome from '../screens/welcome/Welcome';
import {
  getAllReaction,
  checkBanUser,
  setNoti_token
} from '../rtk/API';
import { requestPermissions } from '../screens/service/MyFirebaseMessagingService';
import { setReactions, setFcmToken, logout } from '../rtk/Reducer';
import database from '@react-native-firebase/database';
import messaging from '@react-native-firebase/messaging';
import notifee, { AndroidImportance, EventType } from '@notifee/react-native';
import { useSocket } from '../context/socketContext';
import { useNavigation } from '@react-navigation/native';
import { navigate } from '../navigations/NavigationService';
import { getNotificationPreference } from '../noti/notificationHelper';
import { io } from 'socket.io-client';
import { Linking } from 'react-native';
import { parseQueryString } from '../utils/deeplink/queryParser';

const AppNavigation = () => {
  const dispatch = useDispatch();
  const user = useSelector(state => state.app.user);
  const token = useSelector(state => state.app.token);
  const navigation = useNavigation(); // L·∫•y navigation
  const [socket, setSocket] = useState(null);
  const [onlineUsers, setOnlineUsers] = useState([]); // L∆∞u danh s√°ch user online
  const [isSplashVisible, setSplashVisible] = useState(true); // Tr·∫°ng th√°i ƒë·ªÉ ki·ªÉm so√°t m√†n h√¨nh ch√†o
  //const reactions = useSelector(state => state.app.reactions)
  //console.log("****: " + reactions)
  const fcmToken = useSelector(state => state.app.fcmToken);
  console.log('üì≤ FCM Token t·ª´ Redux:', fcmToken);

  useEffect(() => {
    // check user c√≥ b·ªã kh√≥a ko
    callCheckBanUser();
    //reactions
    callGetAllReaction();
    // Hi·ªÉn th·ªã m√†n h√¨nh ch√†o trong 2 gi√¢y
    const timeout = setTimeout(() => {
      setSplashVisible(false); // ·∫®n m√†n h√¨nh ch√†o sau 2 gi√¢y
    }, 2000);

    return () => {
      clearTimeout(timeout);
    };
  }, []);

  // deeplink
  useEffect(() => {
    const handleDeepLink = async () => {
      // const url = await Linking.getInitialURL();
      // console.log("link1: " + url)
      // if (url) {
      //   const params = new URLSearchParams(url.split('?')[1]);
      //   const ID_post = params.get('ID_post');
      //   if (ID_post) {
      //     console.log(`Chuy·ªÉn h∆∞·ªõng ƒë·∫øn m√†n h√¨nh ID_post: ${ID_post}`);
      //   }
      // }
      try {
        const url = await Linking.getInitialURL();
        if (url) {
          //console.log('üåê Deeplink:', url);
          // Parse deeplink: linkage://post-chi-tiet?ID_post=124
          const [path, queryString] = url.split('?');
          if (path.includes('post-chi-tiet')) {
            const params = parseQueryString(queryString);
            const ID_post = params.ID_post;
            if (ID_post) {
              //console.log(`Chuy·ªÉn h∆∞·ªõng ƒë·∫øn m√†n h√¨nh ID_post: ${ID_post}`);
              // Navigate to PostScreen
              navigation.navigate("PostDetail", { ID_post: ID_post, typeClick: "comment" });
            } else {
              console.error('‚ùå Thi·∫øu ID_post trong deeplink');
            }
          }

        }
      } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω deeplink:', error);
      }
    };

    handleDeepLink();
    // L·∫Øng nghe deeplink khi ·ª©ng d·ª•ng ƒëang ch·∫°y
    const subscription = Linking.addEventListener('url', ({ url }) => {
      //console.log('üåê Nh·∫≠n deeplink:', url);
      const [path, queryString] = url.split('?');
      if (path.includes('post-chi-tiet')) {
        const params = parseQueryString(queryString);
        const ID_post = params.ID_post;
        if (ID_post) {
          //console.log(`Chuy·ªÉn h∆∞·ªõng ƒë·∫øn m√†n h√¨nh ID_post: ${ID_post}`);
          navigation.navigate("PostDetail", { ID_post: ID_post, typeClick: "comment" });
        } else {
          console.error('‚ùå Thi·∫øu ID_post trong deeplink');
        }
      }
    });
    return () => subscription.remove();

  }, []);


  useEffect(() => {
    // K·∫øt n·ªëi t·ªõi server
    const newSocket = io('https://linkage.id.vn', {
      transports: ['websocket', 'polling'],
      reconnection: true, // Cho ph√©p t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i
      reconnectionAttempts: 5, // Th·ª≠ k·∫øt n·ªëi l·∫°i t·ªëi ƒëa 5 l·∫ßn
      timeout: 5000, // Ch·ªù t·ªëi ƒëa 5 gi√¢y tr∆∞·ªõc khi b√°o l·ªói
    });
    setSocket(newSocket);
    if (user && socket) {
      newSocket.emit('user_online', user._id); // G·ª≠i ID user l√™n server khi ƒëƒÉng nh·∫≠p
    }

    newSocket.on('online_users', userList => {
      setOnlineUsers(userList);
      console.log('üü¢ Danh s√°ch user online:', userList);
    });
    console.log('OnlineUsers: ' + onlineUsers);

    return () => {
      newSocket.off('online_users');
    };
  }, [user]);



  //call api getAllReaction
  const callGetAllReaction = async () => {
    try {
      await dispatch(getAllReaction())
        .unwrap()
        .then(response => {
          //console.log("****: " + response)
          dispatch(setReactions(response.reactions));
        })
        .catch(error => {
          console.log('Error:', error);
        });
    } catch (error) {
      console.log(error);
    }
  };
   
  
  //call api getAllReaction
  const callCheckBanUser = async () => {
    try {
      await dispatch(checkBanUser({ ID_user: user._id, token: token }))
        .unwrap()
        .then(response => {
          console.log('status : ' + response.status);
        })
        .catch(error => {
          console.log('T√†i kho·∫£n ƒë√£ b·ªã kh√≥a');
          // quay v·ªÅ trang login
          onLogout();
        });
    } catch (error) {
      console.log(error);
    }
  };

  const onLogoutAndNavigate = () => {
    dispatch(setNoti_token({ ID_user: user._id, fcmToken: fcmToken }))
      .unwrap()
      .then(response => {
        console.log('‚úÖ ƒê√£ g·ª≠i token th√¥ng b√°o tr∆∞·ªõc khi logout:', response);
        dispatch(logout()); // X√≥a user trong Redux
        navigation.reset({
          index: 0,
          routes: [{ name: 'Login' }], // ƒêi·ªÅu h∆∞·ªõng v·ªÅ m√†n h√¨nh Login
        });
      })
      .catch(error => {
        console.log('‚ùå L·ªói khi g·ª≠i token th√¥ng b√°o:', error);
        dispatch(logout()); // V·∫´n logout d√π c√≥ l·ªói
        navigation.reset({
          index: 0,
          routes: [{ name: 'Login' }], // ƒêi·ªÅu h∆∞·ªõng v·ªÅ m√†n h√¨nh Login
        });
      });
  };

  const onLogout = () => {
    dispatch(setNoti_token({ ID_user: user._id, fcmToken: fcmToken }))
      .unwrap()
      .then(response => {
        //console.log(response);
        // x√≥a user trong redux
        dispatch(logout());
      })
      .catch(error => {
        console.log(error);
      });
  };

  useEffect(() => {
    requestPermissions();
    createNotificationChannel();
  }, []);

  async function createNotificationChannel() {
    if (Platform.OS === 'android') {
      await notifee.createChannel({
        id: 'default-channel',
        name: 'M·∫∑c ƒë·ªãnh',
        importance: AndroidImportance.MAX,
      });

      await notifee.createChannel({
        id: 'message-channel',
        name: 'Tin nh·∫Øn',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'friend-request-channel',
        name: 'L·ªùi m·ªùi k·∫øt b·∫°n',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'friend-confirmation-channel',
        name: 'X√°c nh·∫≠n k·∫øt b·∫°n',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'group-invite-channel',
        name: 'L·ªùi m·ªùi tham gia nh√≥m',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'story-channel',
        name: 'Story m·ªõi',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'post-channel',
        name: 'B√†i vi·∫øt m·ªõi',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'call-channel',
        name: 'Cu·ªôc g·ªçi',
        importance: AndroidImportance.HIGH,
        sound: 'ringtone', // √Çm thanh ri√™ng cho cu·ªôc g·ªçi
      });

      await notifee.createChannel({
        id: 'livestream-channel',
        name: 'Livestream',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'game-invite-channel',
        name: 'L·ªùi m·ªùi ch∆°i game',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'post-share-channel',
        name: 'Chia s·∫ª b√†i vi·∫øt',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'comment-channel',
        name: 'B√¨nh lu·∫≠n',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'account-ban-channel',
        name: 'Th√¥ng b√°o kh√≥a t√†i kho·∫£n',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'tagged-post-channel',
        name: 'G·∫Øn th·∫ª trong b√†i vi·∫øt',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'post-like-channel',
        name: 'L∆∞·ª£t th√≠ch b√†i vi·∫øt',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'comment-like-channel',
        name: 'L∆∞·ª£t th√≠ch b√¨nh lu·∫≠n',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'mention-comment-channel',
        name: 'Nh·∫Øc ƒë·∫øn trong b√¨nh lu·∫≠n',
        importance: AndroidImportance.HIGH,
      });

      await notifee.createChannel({
        id: 'event-channel',
        name: 'S·ª± ki·ªán m·ªõi',
        importance: AndroidImportance.HIGH,
      });
    }
  }


  const generateNotificationContent = (notification, user) => {
    if (!notification) {
      console.error("‚ùå L·ªói: notification kh√¥ng h·ª£p l·ªá.");
      return "B·∫°n c√≥ m·ªôt th√¥ng b√°o m·ªõi";
    }
    // 1. Th√¥ng b√°o l·ªùi m·ªùi k·∫øt b·∫°n
    if (
      notification?.type === 'L·ªùi m·ªùi k·∫øt b·∫°n' &&
      notification?.ID_relationship
    ) {
      const { ID_userA, ID_userB } = notification.ID_relationship;
      if (user?._id?.toString() === ID_userA?._id?.toString()) {
        return `${ID_userB?.first_name || ''} ${ID_userB?.last_name || ''
          } ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n v·ªõi b·∫°n`;
      } else {
        return `${ID_userA?.first_name || ''} ${ID_userA?.last_name || ''
          } ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n v·ªõi b·∫°n`;
      }
    }

    // 2. Th√¥ng b√°o ƒë√£ th√†nh b·∫°n b√®
    if (
      notification?.type === 'ƒê√£ th√†nh b·∫°n b√® c·ªßa b·∫°n' &&
      notification?.ID_relationship
    ) {
      const { ID_userA, ID_userB } = notification.ID_relationship;
      if (user?._id?.toString() === ID_userA?._id?.toString()) {
        return `${ID_userB?.first_name || ''} ${ID_userB?.last_name || ''
          } v·ªõi b·∫°n ƒë√£ th√†nh b·∫°n b√®`;
      } else {
        return `${ID_userA?.first_name || ''} ${ID_userA?.last_name || ''
          } v·ªõi b·∫°n ƒë√£ th√†nh b·∫°n b√®`;
      }
    }

    // 3. Th√¥ng b√°o tin nh·∫Øn m·ªõi
    if (
      notification?.type === 'Tin nh·∫Øn m·ªõi' &&
      notification?.ID_message
    ) {
      const { sender, content } = notification.ID_message;
      if (notification.ID_message.type === 'text') {
        return `${sender.first_name || ''} ${sender.last_name || ''}: ${content || 'ƒê√£ g·ª≠i m·ªôt tin nh·∫Øn'
          }`;
      } else {
        return `${sender.first_name || ''} ${sender.last_name || ''
          }: ƒê√£ g·ª≠i m·ªôt ·∫£nh m·ªõi`;
      }
    }

    // 4. Th√¥ng b√°o ƒë∆∞·ª£c m·ªùi v√†o nh√≥m m·ªõi
    if (
      notification?.type === 'B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi v√†o nh√≥m m·ªõi' &&
      notification?.ID_group
    ) {
      return 'B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi v√†o nh√≥m m·ªõi';
    }

    // 5. Th√¥ng b√°o c√≥ story m·ªõi
    if (
      notification?.type === 'ƒê√£ ƒëƒÉng story m·ªõi' &&
      notification?.ID_post
    ) {
      const { ID_user: postOwner, caption } = notification.ID_post;
      return `${postOwner?.first_name || ''} ${postOwner?.last_name || ''
        } ƒë√£ ƒëƒÉng story m·ªõi ${caption ? `: ${caption}` : ''}`;
    }

    // 6. Th√¥ng b√°o c√≥ b√†i ƒëƒÉng m·ªõi
    if (notification?.type === 'ƒê√£ ƒëƒÉng b√†i m·ªõi' && notification?.ID_post) {
      const { ID_user, content } = notification.ID_post; // L·∫•y ID_user thay v√¨ sender
      return ID_user
        ? `${ID_user.first_name || ''} ${ID_user.last_name || ''}: ${content || 'ƒê√£ ƒëƒÉng b√†i post m·ªõi'}`
        : 'C√≥ m·ªôt b√†i ƒëƒÉng m·ªõi';
    }
    // 7. Th√¥ng b√°o cu·ªôc g·ªçi tho·∫°i ƒë·∫øn
    if (
      notification?.type === 'B·∫°n c√≥ 1 cu·ªôc g·ªçi ƒë·∫øn' &&
      notification?.ID_group
    ) {
      navigate('IncomingCallScreen', {
        group: notification.ID_group,
        type: false,
      });
      const { members, isPrivate, name } = notification.ID_group;
      if (isPrivate) {
        const sender = members.find(member => member._id !== user._id);
        return `${sender.first_name || ''} ${sender.last_name || ''
          } ƒëang g·ªçi cho b·∫°n`;
      } else {
        return name
          ? `${name} ƒëang g·ªçi cho b·∫°n`
          : `${members
            .map(m => `${m.first_name} ${m.last_name}`)
            .join(', ')} ƒëang g·ªçi cho b·∫°n`;
      }
    }

    // 8. Th√¥ng b√°o cu·ªôc g·ªçi video ƒë·∫øn
    if (
      notification?.type === 'B·∫°n c√≥ 1 cu·ªôc g·ªçi video ƒë·∫øn' &&
      notification?.ID_group
    ) {
      navigate('IncomingCallScreen', {
        group: notification.ID_group,
        type: true,
      });
      const { members, isPrivate, name } = notification.ID_group;
      if (isPrivate) {
        const sender = members.find(member => member._id !== user._id);
        return `${sender.first_name || ''} ${sender.last_name || ''
          } ƒëang g·ªçi video call cho b·∫°n`;
      } else {
        return name
          ? `Tham gia cu·ªôc g·ªçi video call ${name}`
          : `Tham gia cu·ªôc g·ªçi video call v·ªõi ${members
            .map(m => `${m.first_name} ${m.last_name}`)
            .join(', ')}`;
      }
    }

    // 9. Th√¥ng b√°o livestream
    if (
      notification?.type === 'ƒêang livestream' &&
      notification?.ID_user &&
      notification?.content
    ) {
      const sender = notification.ID_relationship;
      if (sender.ID_userA._id === user._id) {
        return `${sender.ID_userB.first_name || ''} ${sender.ID_userB.last_name || ''} ${'ƒëang ph√°t tr·ª±c ti·∫øp'}`;
      } else {
        return `${sender.ID_userA.first_name || ''} ${sender.ID_userA.last_name || ''} ${'ƒëang ph√°t tr·ª±c ti·∫øp'}`;
      }
    }

    // 10. Th√¥ng b√°o m·ªùi ch∆°i game 3 l√°
    if (
      notification?.type === 'M·ªùi ch∆°i game 3 l√°' &&
      notification?.ID_group
    ) {
      const { members, isPrivate } = notification.ID_group;
      if (isPrivate) {
        const sender = members.find(member => member._id !== user._id);
        return `${sender.first_name || ''} ${sender.last_name || ''
          } ƒëang m·ªùi b·∫°n ch∆°i game 3 l√°`;
      }
    }

    // 11. Th√¥ng b√°o b√†i vi·∫øt c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c chia s·∫ª
    if (
      notification?.type === 'B·∫°n ƒë√£ ƒë∆∞·ª£c chia s·∫ª b√†i vi·∫øt c·ªßa b·∫°n' &&
      notification?.ID_post
    ) {
      return 'B√†i vi·∫øt c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c chia s·∫ª';
    }

    // 12. Th√¥ng b√°o c√≥ b√¨nh lu·∫≠n m·ªõi
    if (notification?.type === 'ƒê√£ b√¨nh lu·∫≠n v√†o b√†i vi·∫øt c·ªßa b·∫°n' && notification?.ID_comment) {
      const { ID_user, content } = notification.ID_comment || {};
      return `${ID_user?.first_name || ''} ${ID_user?.last_name || ''
        } ƒë√£ b√¨nh lu·∫≠n: ${content || 'B·∫°n c√≥ b√¨nh lu·∫≠n m·ªõi'}`;
    }

    // 13. Th√¥ng b√°o t√†i kho·∫£n b·ªã kh√≥a
    if (notification?.type === 'T√†i kho·∫£n b·ªã kh√≥a') {
      return 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a';
    }

    // 15. Th√¥ng b√°o t√†i kho·∫£n b·ªã kh√≥a
    if (notification?.type === 'T√†i kho·∫£n b·ªã kh√≥a') {
      return 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a';
    }

    // 16. Th√¥ng b√°o m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng kh·ªõp lo·∫°i n√†o
    return 'B·∫°n c√≥ m·ªôt th√¥ng b√°o m·ªõi';
  };


  const getChannelId = (notificationType) => {
    switch (notificationType) {
      case 'Tin nh·∫Øn m·ªõi':
        return 'message-channel';

      case 'L·ªùi m·ªùi k·∫øt b·∫°n':
        return 'friend-request-channel';

      case 'ƒê√£ th√†nh b·∫°n b√® c·ªßa b·∫°n':
        return 'friend-confirmation-channel';

      case 'B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi v√†o nh√≥m m·ªõi':
        return 'group-invite-channel';

      case 'ƒê√£ ƒëƒÉng story m·ªõi':
        return 'story-channel';

      case 'ƒê√£ ƒëƒÉng b√†i m·ªõi':
        return 'post-channel';

      case 'B·∫°n c√≥ 1 cu·ªôc g·ªçi ƒë·∫øn':
      case 'B·∫°n c√≥ 1 cu·ªôc g·ªçi video ƒë·∫øn':
        return 'call-channel';

      case 'ƒêang livestream':
        return 'livestream-channel';

      case 'M·ªùi ch∆°i game 3 l√°':
        return 'game-invite-channel';

      case 'B·∫°n ƒë√£ ƒë∆∞·ª£c chia s·∫ª b√†i vi·∫øt c·ªßa b·∫°n':
        return 'post-share-channel';

      case 'B√¨nh lu·∫≠n':
        return 'comment-channel';

      case 'T√†i kho·∫£n b·ªã kh√≥a':
        return 'account-ban-channel';

      case 'M·ªùi tham gia nh√≥m':
        return 'group-invite-channel';

      case 'ƒê∆∞·ª£c tag v√†o b√†i vi·∫øt':
        return 'tagged-post-channel';

      case 'Nh·∫≠n ƒë∆∞·ª£c like tr√™n b√†i vi·∫øt':
        return 'post-like-channel';

      case 'Nh·∫≠n ƒë∆∞·ª£c like tr√™n b√¨nh lu·∫≠n':
        return 'comment-like-channel';

      case 'C√≥ ng∆∞·ªùi chia s·∫ª b√†i vi·∫øt':
        return 'post-share-channel';

      case 'ƒê∆∞·ª£c nh·∫Øc ƒë·∫øn trong b√¨nh lu·∫≠n':
        return 'mention-comment-channel';

      case 'Tham gia s·ª± ki·ªán m·ªõi':
        return 'event-channel';

      default:
        return 'default-channel';
    }
  };
  //chuy·ªÉn trang khi ·∫•n v√†o th√¥ng b√°o
  const navigateToScreen = (notification) => {
    if (!notification || !notification.type) {
      console.warn("‚ö† Kh√¥ng c√≥ th√¥ng tin ƒëi·ªÅu h∆∞·ªõng t·ª´ th√¥ng b√°o");
      return;
    }

    switch (notification.type) {
      case 'Tin nh·∫Øn m·ªõi':
        navigation.navigate('Chat', { ID_group: notification?.ID_message?.ID_group?._id });
        break;

      case 'L·ªùi m·ªùi k·∫øt b·∫°n':
        navigation.navigate('Friend');
        break;

      case 'ƒê√£ th√†nh b·∫°n b√® c·ªßa b·∫°n':
        navigation.navigate('ListFriend');
        break;

      case 'B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi v√†o nh√≥m m·ªõi':
        navigation.navigate('HomeChat');
        break;

      case 'M·ªùi ch∆°i game 3 l√°':
        navigation.navigate('Chat', { ID_group: notification?.ID_group?._id });
        break;

      // case 'ƒê√£ ƒëƒÉng b√†i m·ªõi':
      //   navigation.navigate('PostDetailScreen', { postId: notification?.ID_post?._id });
      //   break;

      // case 'ƒêang livestream':
      //   navigation.navigate('LivestreamScreen', { livestreamId: notification?.ID_user?._id });
      //   break;

      // case 'B√¨nh lu·∫≠n':
      //   navigation.navigate('CommentScreen', { postId: notification?.ID_comment?.postId });
      //   break;

      default:
        console.warn("‚ö† Kh√¥ng t√¨m th·∫•y m√†n h√¨nh ph√π h·ª£p v·ªõi lo·∫°i th√¥ng b√°o:", notification.type);
        break;
    }
  };
  const showNotification = async (notification) => {
    try {
      const channelId = getChannelId(notification?.type);
      const isEnabled = await getNotificationPreference(channelId);

      if (!isEnabled) {
        console.log(`üîï Th√¥ng b√°o b·ªã t·∫Øt cho channel: ${channelId}`);
        return;
      }

      const formattedData = {};
      Object.keys(notification).forEach(key => {
        formattedData[key] = typeof notification[key] === 'string'
          ? notification[key]
          : JSON.stringify(notification[key]);
      });

      await notifee.displayNotification({
        title: notification?.title || 'Th√¥ng b√°o',
        body: generateNotificationContent(notification, user),
        data: formattedData,
        android: {
          channelId: getChannelId(notification?.type),
          smallIcon: 'ic_launcher',
        },
      });

    } catch (error) {
      console.error('‚ùå L·ªói khi hi·ªÉn th·ªã th√¥ng b√°o:', error);
    }
  };

  // t·∫°o token n√®
  useEffect(() => {
    const getFCMToken = async () => {
      try {
        const token = await messaging().getToken();
        console.log('üî• FCM Token:', token);
        if (token) {
          dispatch(setFcmToken(token)); // L∆∞u v√†o Redux
          //if(user )
        }
      } catch (error) {
        console.log('‚ùå L·ªói khi l·∫•y FCM Token:', error);
      }
    };

    getFCMToken();
  }, []);

  useEffect(() => {
    // Khi app ƒëang m·ªü
    const unsubscribeForeground = messaging().onMessage(async remoteMessage => {
      try {
        console.log('üì© Nh·∫≠n th√¥ng b√°o khi app ƒëang m·ªü:', remoteMessage);

        if (!remoteMessage?.data?.notification) {
          console.warn('‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu notification');
          return;
        }

        let notification;
        try {
          notification = JSON.parse(remoteMessage.data.notification);
        } catch (error) {
          console.error('‚ùå L·ªói khi parse JSON notification:', error);
          return;
        }

        console.log('‚úÖ ƒê√£ parse notification:', notification);

        // N·∫øu th√¥ng b√°o l√† "T√†i kho·∫£n b·ªã kh√≥a"
        if (notification?.type === 'T√†i kho·∫£n b·ªã kh√≥a') {
          console.log('üîí T√†i kho·∫£n b·ªã kh√≥a - ƒêƒÉng xu·∫•t v√† chuy·ªÉn v·ªÅ trang login');
          onLogoutAndNavigate();
          return;
        }

        // Hi·ªÉn th·ªã th√¥ng b√°o cho c√°c lo·∫°i kh√°c
        await showNotification(notification);

      } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω th√¥ng b√°o:', error);
      }
    });
    // Khi app ch·∫°y n·ªÅn v√† ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o
    const unsubscribeOpenedApp = messaging().onNotificationOpenedApp(
      remoteMessage => {
        console.log('üîî Ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o khi app ch·∫°y n·ªÅn:', remoteMessage);
        if (remoteMessage?.data?.notification) {
          let notification;
          try {
            notification = JSON.parse(remoteMessage.data.notification);
            if (notification?.type === 'T√†i kho·∫£n b·ªã kh√≥a') {
              console.log('üîí T√†i kho·∫£n b·ªã kh√≥a khi nh·∫•n th√¥ng b√°o - ƒêƒÉng xu·∫•t');
              onLogout();
            }
          } catch (error) {
            console.error('‚ùå L·ªói khi parse JSON notification:', error);
          }
        }
      },
    );
    // Khi app b·ªã kill v√† m·ªü t·ª´ th√¥ng b√°o
    messaging().getInitialNotification().then(remoteMessage => {
      if (remoteMessage?.data?.notification) {
        let notification;
        try {
          notification = JSON.parse(remoteMessage.data.notification);
          console.log('üîî App ƒë∆∞·ª£c m·ªü t·ª´ th√¥ng b√°o khi b·ªã kill:', notification);
          if (notification?.type === 'T√†i kho·∫£n b·ªã kh√≥a') {
            console.log('üîí T√†i kho·∫£n b·ªã kh√≥a khi m·ªü app - ƒêƒÉng xu·∫•t');
            onLogout();
          }
        } catch (error) {
          console.error('‚ùå L·ªói khi parse JSON notification:', error);
        }
      }
    });

    const unsubscribeNotifee = notifee.onForegroundEvent(({ type, detail }) => {
      if (type === EventType.PRESS) {
        console.log('üîî Ng∆∞·ªùi d√πng ƒë√£ nh·∫•n v√†o th√¥ng b√°o:', detail.notification);

        let notificationData = detail.notification?.data;

        Object.keys(notificationData).forEach(key => {
          try {
            notificationData[key] = JSON.parse(notificationData[key]); // ‚úÖ Chuy·ªÉn v·ªÅ object
          } catch (e) {
            // N·∫øu l·ªói th√¨ gi·ªØ nguy√™n, v√¨ c√≥ th·ªÉ n√≥ ƒë√£ l√† string
          }
        });

        navigateToScreen(notificationData);
      }
    });


    return () => {
      unsubscribeOpenedApp();
      unsubscribeNotifee();
      unsubscribeForeground();
      // initialNotification();
    };
  }, [onLogoutAndNavigate]);

  return isSplashVisible ? (
    <Welcome />
  ) : user ? (
    <HomeNavigation />
  ) : (
    <UserNavigation />
  );
};

export default AppNavigation;