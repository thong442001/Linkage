import React, { useState, useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { useDispatch, useSelector } from 'react-redux';
import HomeNavigation from './HomeNavigation';
import UserNavigation from './UserNavigation';
import Welcome from '../screens/welcome/Welcome';
import {
  getAllReaction,
  checkBanUser,
  setNoti_token
} from '../rtk/API';
import { requestPermissions } from '../screens/service/MyFirebaseMessagingService';
import {
  setReactions,
  setFcmToken,
  logout,
} from '../rtk/Reducer';
import database from '@react-native-firebase/database';
import messaging from '@react-native-firebase/messaging';
import notifee, { AndroidImportance, EventType } from '@notifee/react-native';
import { useSocket } from '../context/socketContext';
import { useNavigation } from '@react-navigation/native';
import { navigate } from '../navigations/NavigationService';


const AppNavigation = () => {
  const dispatch = useDispatch();
  const user = useSelector(state => state.app.user);
  const token = useSelector(state => state.app.token);
  const navigation = useNavigation(); // L·∫•y navigation
  const { onlineUsers } = useSocket(); // L·∫•y danh s√°ch user online t·ª´ context


  const [isSplashVisible, setSplashVisible] = useState(true); // Tr·∫°ng th√°i ƒë·ªÉ ki·ªÉm so√°t m√†n h√¨nh ch√†o
  //const reactions = useSelector(state => state.app.reactions)
  //console.log("****: " + reactions)
  const fcmToken = useSelector(state => state.app.fcmToken);
  console.log('üì≤ FCM Token t·ª´ Redux:', fcmToken);

  useEffect(() => {
    // check user c√≥ b·ªã kh√≥a ko
    callCheckBanUser();
    //reactions
    callGetAllReaction();
    // Hi·ªÉn th·ªã m√†n h√¨nh ch√†o trong 2 gi√¢y
    const timeout = setTimeout(() => {
      setSplashVisible(false); // ·∫®n m√†n h√¨nh ch√†o sau 2 gi√¢y
    }, 2000);

    return () => {
      clearTimeout(timeout);
    };
  }, []);

  useEffect(() => {
    console.log('üîµ Danh s√°ch user online: ', onlineUsers);
  }, [onlineUsers]);

  //call api getAllReaction
  const callGetAllReaction = async () => {
    try {
      await dispatch(getAllReaction())
        .unwrap()
        .then(response => {
          //console.log("****: " + response)
          dispatch(setReactions(response.reactions));
        })
        .catch(error => {
          console.log('Error:', error);
        });
    } catch (error) {
      console.log(error);
    }
  };

  //call api getAllReaction
  const callCheckBanUser = async () => {
    try {
      await dispatch(checkBanUser({ ID_user: user._id, token: token }))
        .unwrap()
        .then(response => {
          console.log("status : " + response.status)
        })
        .catch(error => {
          console.log('T√†i kho·∫£n ƒë√£ b·ªã kh√≥a');
          // quay v·ªÅ trang login
          onLogout();
        });
    } catch (error) {
      console.log(error);
    }
  };

  const onLogout = () => {
    dispatch(setNoti_token({ ID_user: user._id, fcmToken: fcmToken }))
      .unwrap()
      .then((response) => {
        //console.log(response);
        // x√≥a user trong redux
        dispatch(logout())
      })
      .catch((error) => {
        console.log(error);
      });
  };

  useEffect(() => {
    requestPermissions();
    createNotificationChannel();
  }, []);

  async function createNotificationChannel() {
    if (Platform.OS === 'android') {
      await notifee.createChannel({
        id: 'default-channel',
        name: 'Default Channel',
        importance: AndroidImportance.MAX,
      });
    }
  }
  // t·∫°o token n√®
  useEffect(() => {
    const getFCMToken = async () => {
      try {
        const token = await messaging().getToken();
        console.log('üî• FCM Token:', token);
        if (token) {
          dispatch(setFcmToken(token)); // L∆∞u v√†o Redux
          //if(user )
        }
      } catch (error) {
        console.log('‚ùå L·ªói khi l·∫•y FCM Token:', error);
      }
    };

    getFCMToken();
  }, []);

  useEffect(() => {
    // Khi app ƒëang m·ªü
    const unsubscribeForeground = messaging().onMessage(async remoteMessage => {
      try {
        console.log('üì© Nh·∫≠n th√¥ng b√°o khi app ƒëang m·ªü:', remoteMessage);

        if (!remoteMessage?.data?.notification) {
          console.warn('‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu notification');
          return;
        }

        // Ki·ªÉm tra JSON h·ª£p l·ªá tr∆∞·ªõc khi parse
        let notification;
        try {
          notification = JSON.parse(remoteMessage.data.notification);
        } catch (error) {
          console.error('‚ùå L·ªói khi parse JSON notification:', error);
          return;
        }

        console.log('‚úÖ ƒê√£ parse notification:', notification);

        const contentne = () => {
          if (
            notification?.type === 'L·ªùi m·ªùi k·∫øt b·∫°n' &&
            notification?.ID_relationship
          ) {
            const { ID_userA, ID_userB } = notification.ID_relationship;

            if (user?._id?.toString() === ID_userA?._id?.toString()) {
              return `${ID_userB?.first_name || ''} ${ID_userB?.last_name || ''
                } ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n v·ªõi b·∫°n`;
            } else {
              return `${ID_userA?.first_name || ''} ${ID_userA?.last_name || ''
                } ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n v·ªõi b·∫°n`;
            }
          }

          if (
            notification?.type === 'ƒê√£ th√†nh b·∫°n b√® c·ªßa b·∫°n' &&
            notification?.ID_relationship

          ) {
            const { ID_userA, ID_userB } = notification.ID_relationship;

            if (user?._id?.toString() === ID_userA?._id?.toString()) {
              return `${ID_userB?.first_name || ''} ${ID_userB?.last_name || ''
                } v·ªõi b·∫°n ƒë√£ th√†nh b·∫°n b√®`;
            } else {
              return `${ID_userA?.first_name || ''} ${ID_userA?.last_name || ''
                } v·ªõi b·∫°n ƒë√£ th√†nh b·∫°n b√®`;
            }
          }

          if (
            notification?.type === 'Tin nh·∫Øn m·ªõi' &&
            notification?.ID_message
          ) {
            const { sender, content } = notification.ID_message;

            if (notification.ID_message.type === "text") {
              return `${sender.first_name || ''} ${sender.last_name || ''}: ${content || 'ƒê√£ g·ª≠i m·ªôt tin nh·∫Øn'
                }`;
            } else {
              return `${sender.first_name || ''} ${sender.last_name || ''}: ${'ƒê√£ g·ª≠i m·ªôt ·∫£nh m·ªõi'
                }`;
            }
          }

          if (
            notification?.type === 'B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi v√†o nh√≥m m·ªõi' &&
            notification?.ID_group
          ) {
            return `B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi v√†o nh√≥m m·ªõi`;
          }


          if (
            notification?.type === "ƒê√£ ƒëƒÉng story m·ªõi" &&
            notification?.ID_post
          ) {
            const { sender, content } = notification.ID_post;

            if (sender) {
              return `${sender.first_name || ''} ${sender.last_name || ''}: ${content || 'ƒê√£ ƒëƒÉng story m·ªõi'
                }`;
            }
          }

          if (
            notification?.type === 'B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi v√†o nh√≥m m·ªõi' &&
            notification?.ID_group
          ) {
            return `B·∫°n ƒë√£ ƒë∆∞·ª£c m·ªùi v√†o nh√≥m m·ªõi`;
          }

          if (
            notification?.type === "ƒê√£ ƒëƒÉng b√†i m·ªõi" &&
            notification?.ID_post
          ) {
            const { sender, content } = notification.ID_post;

            if (sender) {
              return `${sender.first_name || ''} ${sender.last_name || ''}: ${content || 'ƒê√£ ƒëƒÉng b√†i post m·ªõi'}`;
            }
          }
          if (
            notification?.type === "B·∫°n c√≥ 1 cu·ªôc g·ªçi ƒë·∫øn" &&
            notification?.ID_group
          ) {
            // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh nh·∫≠n cu·ªôc g·ªçi
            navigate("IncomingCallScreen", { group: notification.ID_group, type: false });
            const { members, isPrivate, name } = notification.ID_group;
            if (isPrivate == true) {
              const sender = members.find(member => member._id !== user._id);
              return `${sender.first_name || ''} ${sender.last_name || ''} ƒëang g·ªçi cho b·∫°n`;
            } else {
              if (name == null) {
                const names = members
                  .filter(memders => memders._id !== user._id)
                  .map(user => `${user.first_name} ${user.last_name}`)
                  .join(", ");
                return `${names} ƒëang g·ªçi cho b·∫°n`;
              } else {
                return `${name} ƒëang g·ªçi cho b·∫°n`;
              }
            }

          }
          if (
            notification?.type === "B·∫°n c√≥ 1 cu·ªôc g·ªçi video ƒë·∫øn" &&
            notification?.ID_group
          ) {
            navigate("IncomingCallScreen", { group: notification.ID_group, type: true });
            const { members, isPrivate, name } = notification.ID_group;
            if (isPrivate == true) {
              const sender = members.find(member => member._id !== user._id);
              return `${sender.first_name || ''} ${sender.last_name || ''} ƒëang g·ªçi video call cho b·∫°n`;
            } else {
              if (name == null) {
                const names = members
                  .filter(memders => memders._id !== user._id)
                  .map(user => `${user.first_name} ${user.last_name}`)
                  .join(", ");
                return `Tham gia cu·ªôc g·ªçi video call ${names}`;
              } else {
                return `Tham gia cu·ªôc g·ªçi video call ${name}`;
              }
            }

          }
          // game 3 la
          if (
            notification?.type === "M·ªùi ch∆°i game 3 l√°" &&
            notification?.ID_group
          ) {
            navigate("NguoiDuocMoi", { group: notification.ID_group });
            const { members, isPrivate } = notification.ID_group;
            if (isPrivate == true) {
              const sender = members.find(member => member._id !== user._id);
              return `${sender.first_name || ''} ${sender.last_name || ''} ƒëang m·ªùi b·∫°n ch∆°i game 3 l√°`;
            }

          }

          return 'B·∫°n c√≥ m·ªôt th√¥ng b√°o m·ªõi'; // N·ªôi dung m·∫∑c ƒë·ªãnh
        };

        // Hi·ªÉn th·ªã th√¥ng b√°o b·∫±ng Notifee
        await notifee.displayNotification({
          title: remoteMessage.notification?.title ?? 'Th√¥ng b√°o',
          body: contentne(),
          android: {
            channelId: 'default-channel', // ƒê·∫£m b·∫£o channelId t·ªìn t·∫°i
            smallIcon: 'ic_launcher', // ƒê·ªïi icon n·∫øu c·∫ßn
          },
        });
      } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω th√¥ng b√°o:', error);
      }
    });

    // Khi app ch·∫°y n·ªÅn v√† ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o
    const unsubscribeOpenedApp = messaging().onNotificationOpenedApp(
      remoteMessage => {
        console.log(
          'üîî Ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o khi app ch·∫°y n·ªÅn:',
          remoteMessage,
        );
      },
    );

    // Khi app b·ªã kill v√† m·ªü t·ª´ th√¥ng b√°o
    const initialNotification = messaging()
      .getInitialNotification()
      .then(remoteMessage => {
        if (remoteMessage) {
          console.log(
            'üîî App ƒë∆∞·ª£c m·ªü t·ª´ th√¥ng b√°o khi b·ªã kill:',
            remoteMessage,
          );
        }
      });

    // Khi ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o t·ª´ notifee
    const unsubscribeNotifee = notifee.onForegroundEvent(({ type, detail }) => {
      if (type === EventType.PRESS) {
        console.log(
          'üîî Ng∆∞·ªùi d√πng ƒë√£ nh·∫•n v√†o th√¥ng b√°o:',
          detail.notification,
        );
      }
    });

    return () => {
      unsubscribeForeground();
      unsubscribeOpenedApp();
      unsubscribeNotifee();
      // initialNotification();
    };
  }, []);

  return isSplashVisible ? <Welcome /> : user ? <HomeNavigation /> : <UserNavigation />;
};

export default AppNavigation;