import React, { useState, useEffect } from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { useDispatch, useSelector } from 'react-redux';
import HomeNavigation from './HomeNavigation';
import UserNavigation from './UserNavigation';
import Welcome from '../screens/welcome/Welcome';
import {
  getAllReaction,
} from '../rtk/API';
import { requestPermissions } from '../screens/service/MyFirebaseMessagingService';
import { setReactions, setFcmToken } from '../rtk/Reducer';
import database from '@react-native-firebase/database';
import messaging from '@react-native-firebase/messaging';
import notifee, { AndroidImportance, EventType } from '@notifee/react-native';
import { io } from "socket.io-client";  // Th√™m socket.io-client

const AppNavigation = () => {

  const dispatch = useDispatch();
  const user = useSelector(state => state.app.user);
  const [socket, setSocket] = useState(null);
  const [onlineUsers, setOnlineUsers] = useState([]); // L∆∞u danh s√°ch user online

  const [isSplashVisible, setSplashVisible] = useState(true);  // Tr·∫°ng th√°i ƒë·ªÉ ki·ªÉm so√°t m√†n h√¨nh ch√†o
  //const reactions = useSelector(state => state.app.reactions)
  //console.log("****: " + reactions)
  const fcmToken = useSelector(state => state.app.fcmToken);
  console.log("üì≤ FCM Token t·ª´ Redux:", fcmToken);


  useEffect(() => {
    //reactions
    callGetAllReaction()
    // Hi·ªÉn th·ªã m√†n h√¨nh ch√†o trong 2 gi√¢y
    const timeout = setTimeout(() => {
      setSplashVisible(false);  // ·∫®n m√†n h√¨nh ch√†o sau 2 gi√¢y
    }, 2000);

    return () => {
      clearTimeout(timeout);
    };
  }, []);

  useEffect(() => {
    // K·∫øt n·ªëi t·ªõi server
    const newSocket = io('https://linkage.id.vn', {
      transports: ['websocket', 'polling'],
      reconnection: true,   // Cho ph√©p t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i
      reconnectionAttempts: 5, // Th·ª≠ k·∫øt n·ªëi l·∫°i t·ªëi ƒëa 5 l·∫ßn
      timeout: 5000, // Ch·ªù t·ªëi ƒëa 5 gi√¢y tr∆∞·ªõc khi b√°o l·ªói
    });
    setSocket(newSocket);
    if (user && socket) {
      newSocket.emit("user_online", user._id); // G·ª≠i ID user l√™n server khi ƒëƒÉng nh·∫≠p
    }

    newSocket.on("online_users", (userList) => {
      setOnlineUsers(userList);
      console.log("üü¢ Danh s√°ch user online:", userList);
    });
    console.log("OnlineUsers: " + onlineUsers);

    return () => {
      newSocket.off("online_users");
    };
  }, [user]);


  //call api getAllReaction
  const callGetAllReaction = async () => {
    try {
      await dispatch(getAllReaction())
        .unwrap()
        .then((response) => {
          //console.log("****: " + response)
          dispatch(setReactions(response.reactions));
        })
        .catch((error) => {
          console.log('Error:', error);
        });

    } catch (error) {
      console.log(error)
    }
  }

  useEffect(() => {
    requestPermissions();
    createNotificationChannel();
  }, []);

  async function createNotificationChannel() {
    if (Platform.OS === 'android') {
      await notifee.createChannel({
        id: 'default-channel',
        name: 'Default Channel',
        importance: AndroidImportance.HIGH,
      });
    }
  }
  // t·∫°o token n√®
  useEffect(() => {
    const getFCMToken = async () => {
      try {
        const token = await messaging().getToken();
        console.log("üî• FCM Token:", token);
        if (token) {
          dispatch(setFcmToken(token)); // L∆∞u v√†o Redux
          //if(user )
        }
      } catch (error) {
        console.log("‚ùå L·ªói khi l·∫•y FCM Token:", error);
      }
    };

    getFCMToken();
  }, []);


  useEffect(() => {
    // Khi app ƒëang m·ªü
    const unsubscribeForeground = messaging().onMessage(async remoteMessage => {
      console.log('üì© Nh·∫≠n th√¥ng b√°o khi app ƒëang m·ªü:', remoteMessage);
      displayNotification(
        remoteMessage.notification?.title ?? 'Th√¥ng b√°o',
        remoteMessage.notification?.body ?? 'B·∫°n c√≥ m·ªôt tin nh·∫Øn m·ªõi.',
        remoteMessage.data ?? {}
      );
    });

    // Khi app ch·∫°y n·ªÅn v√† ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o
    const unsubscribeOpenedApp = messaging().onNotificationOpenedApp(remoteMessage => {
      console.log('üîî Ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o khi app ch·∫°y n·ªÅn:', remoteMessage);
    });

    // Khi app b·ªã kill v√† m·ªü t·ª´ th√¥ng b√°o
    const initialNotification = messaging().getInitialNotification()
      .then(remoteMessage => {
        if (remoteMessage) {
          console.log('üîî App ƒë∆∞·ª£c m·ªü t·ª´ th√¥ng b√°o khi b·ªã kill:', remoteMessage);
        }
      });

    // Khi ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o t·ª´ notifee
    const unsubscribeNotifee = notifee.onForegroundEvent(({ type, detail }) => {
      if (type === EventType.PRESS) {
        console.log('üîî Ng∆∞·ªùi d√πng ƒë√£ nh·∫•n v√†o th√¥ng b√°o:', detail.notification);
      }
    });

    return () => {
      unsubscribeForeground();
      unsubscribeOpenedApp();
      unsubscribeNotifee();
    };
  }, []);



  return (
    <NavigationContainer>
      {
        isSplashVisible
          ? <Welcome />  // Hi·ªÉn th·ªã m√†n h√¨nh ch√†o tr∆∞·ªõc
          : (user ? <HomeNavigation /> : <UserNavigation />)

      }

    </NavigationContainer>
  );
}

export default AppNavigation;